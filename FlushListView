import java.text.SimpleDateFormat;
import android.content.Context;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.RotateAnimation;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.guaju.mylistview.MyAsynchTask;
import com.guaju.mylistview.R;

public class FlushListView extends ListView implements OnScrollListener {

	private float downY;
	private float moveY;
	private float yOffset;
	private View footer;
	private View header;
	private TextView tv_state_desc;
	private TextView tv_last_refresh_time;
	private ImageView iv_arrow;
	private TextView tv_state_load;
	private int mFooterHeight;
	private int mHeaderHeight;
	private float paddingTop;
	private  MyAsynchTask myAsynch;
	private  boolean isLoadMore = false;

	
	private OnRefreshingListener onRefreshingListener;

	// 定义几个拉动的状态
	public static final int PULL_DOWN = 0; // 就是往下拉不刷新的模式
	public static final int RELEASE_REFRESH = 1; // 就是往下拉,然后有刷新动作的模式
	public static final int REFRESHING = 2; // 正在刷新模式
	
	public int currentState = PULL_DOWN; // 默认下拉刷新
	private RotateAnimation down;
	private RotateAnimation up;
	private ProgressBar pb_header;

	public FlushListView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		// TODO Auto-generated constructor stub
		init();
	}

	public FlushListView(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		init();
	}

	public FlushListView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		init();
	}

	void init() {
		initHeaderView();
		initFooterView();
		initAnimation();
		setOnScrollListener(this);
	}

	private void initAnimation() {
		//向下翻转的动画
		down = new RotateAnimation(-180,-360,RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
		down.setDuration(500);
		down.setFillAfter(true);
		
		up = new RotateAnimation(0,-180, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
		up.setDuration(500);
		up.setFillAfter(true);
		
	}

	// 重写ontouchevent事件
	@Override
	public boolean onTouchEvent(MotionEvent ev) {
		// 判断手指触摸的事件
		switch (ev.getAction()) {
		case MotionEvent.ACTION_DOWN:
			downY = ev.getY();
			break;
		case MotionEvent.ACTION_MOVE:
			moveY = ev.getY();
			yOffset = moveY - downY;
			// 判断现在是否是显示第一个条目getFirstVisiblePosition()==0就是显示第一个条目.
			// 确定是向下滑
			if (yOffset > 0 && getFirstVisiblePosition() == 0) {
				// 向下走的量
				paddingTop = -mHeaderHeight + yOffset*0.5f;
				System.out.println("现在的模式是下拉刷新模式");
				// 然后设定padding值
				header.setPadding(0, (int) paddingTop, 0, 0);
				//如果paddingtop是0的话,就改变现在的下拉状态,改变成释放刷新模式	
				// 不能无限度的啦下去,得设定拉下去,需要判断往下拉的大小
				// 不是释放状态
				if (paddingTop > 0 && currentState != RELEASE_REFRESH) {
					// 就把currentState置为RELEASE_REFRESH模式
					currentState = RELEASE_REFRESH;
					System.out.println("切换成释放刷新模式");
					// 然后加载数据
					updateCurrentState();
				}
				else if (paddingTop<0 && currentState!=PULL_DOWN) {
					currentState=PULL_DOWN;
					updateCurrentState();
				}
				return true;
			}

			break;
		case MotionEvent.ACTION_UP:
			//如果松手了还是下拉刷新的,就是拽的比较少的,那么仍然将padding隐藏
			if (currentState == PULL_DOWN) {
				header.setPadding(0, -mHeaderHeight, 0, 0);
			}
			//如果是释放刷新,那么就表名要刷新,更改textView以及布局等
			else if (currentState==RELEASE_REFRESH) {
				currentState=REFRESHING;
				//更新布局
				updateCurrentState();
			}
			break;
		default:
			break;
		}

		return super.onTouchEvent(ev);
	}

	private void updateCurrentState() {
		switch (currentState) {
		case PULL_DOWN:
			//下拉状态
			iv_arrow.setVisibility(VISIBLE);
			iv_arrow.startAnimation(down);
			tv_state_desc.setText("下拉刷新");
			pb_header.setVisibility(INVISIBLE);
			
			break;
		case RELEASE_REFRESH:
			iv_arrow.setVisibility(VISIBLE);
			iv_arrow.startAnimation(up);
			tv_state_desc.setText("释放刷新");
			pb_header.setVisibility(INVISIBLE);
			up.setFillEnabled(false);
			break;
		case REFRESHING:
			//打开progressbar
			pb_header.setVisibility(VISIBLE);
			//必须先清除动画
			iv_arrow.clearAnimation();
			//然后在隐藏箭头
			iv_arrow.setVisibility(INVISIBLE);
			//更改textview
			pb_header.setVisibility(VISIBLE);
			tv_state_desc.setText("更新中------");
			//并且更新这个下拉的高度
			header.setPadding(0, 0, 0, 0);
			
			//这时就需要设置一个监听,如果到了这个状态那么就会调用监听事件中的方法a
			
			//需要在这里执行刷新的方法体
			if (onRefreshingListener!=null) {
				onRefreshingListener.onRefresh();
				//myAsynch.myAsynchTask();
//				onRefreshComplete();
			}
			//接口回调
			break;
		default:
			break;
		}

	}

	//不需要写
//	public OnRefreshingListener getOnRefreshingListener() {
//		return onRefreshingListener;
//	}

	public void setOnRefreshingListener(OnRefreshingListener onRefreshingListener) {
		this.onRefreshingListener = onRefreshingListener;
	}

	private void initFooterView() {
		footer = View.inflate(getContext(), R.layout.layout_footer_item, null);
		tv_state_load = (TextView) footer.findViewById(R.id.tv_state_load);
		footer.measure(0, 0);
		mFooterHeight = footer.getMeasuredHeight();
		// 先将其隐藏,等下拉到时候再显示
		footer.setPadding(0, -mFooterHeight, 0, 0);
		this.addFooterView(footer);
	}

	private void initHeaderView() {
		header = View.inflate(getContext(), R.layout.layout_header_item, null);
		tv_state_desc = (TextView) header.findViewById(R.id.tv_state_desc);
		tv_last_refresh_time = (TextView) header
				.findViewById(R.id.tv_last_refresh_time);
		iv_arrow = (ImageView) header.findViewById(R.id.iv_arrow);
		pb_header = (ProgressBar) header.findViewById(R.id.pb_header);
		// 测量,写0的话就是默认按照屏幕的规格走,记得这里测量的是这个header的值所以得掉header.measure(0,0);否者怎么测量都是0
		header.measure(0, 0);
		//不能直接就getheight谁知道你get的谁的height,所以得写header,getMeasuredHeight;
		mHeaderHeight = header.getMeasuredHeight();
		// 刚开始时这个应该是隐藏的,下拉的时候就能加载出来,下边把header隐藏起来
		header.setPadding(0, -mHeaderHeight, 0, 0);
		this.addHeaderView(header);
	}
	
	
	
	
	public void onRefreshComplete(){
		if (isLoadMore) {
			//并且把进度条隐藏
			footer.setPadding(0, -mFooterHeight, 0, 0);
//			如果现在是加载更多,那么就改变状态
			isLoadMore=false;
		}
		else {
		//这个时候需要把状态改回来
		currentState=PULL_DOWN;
		//然后把箭头显示出来
		iv_arrow.setVisibility(VISIBLE);
		//然后设置progressbar为隐藏
		pb_header.setVisibility(INVISIBLE);
		tv_state_desc.setText("下拉刷新");
		//设置最后刷新时间
		String  time=getCurrentTime();
		tv_last_refresh_time.setText("最后更新时间:"+time);
		//执行完后隐藏
		header.setPadding(0, -mHeaderHeight, 0, 0);
		}
	}

	private String getCurrentTime() {
		
		long currentTimeMillis = System.currentTimeMillis();
		//2015-8-6 10:46:37
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String format = sdf.format(currentTimeMillis);
		
		return format;
	}

	@Override
	/**
	 *   SCROLL_STATE_IDLE 空闲
	 *   SCROLL_STATE_TOUCH_SCROLL  手指滑动
	 *   SCROLL_STATE_FLING.惯性滑动状态
	 */
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		
		if (isLoadMore) {
			return;
		}
		//滚动状态更新时调用,listview的默认的getcount就是最大值
		if ((scrollState==SCROLL_STATE_IDLE ||scrollState==SCROLL_STATE_TOUCH_SCROLL) ) {
			if (getLastVisiblePosition()==getCount()-1) {
				//那么显示
				footer.setPadding(0, 0, 0, 0);
				isLoadMore=true;
				setSelection(getCount());
				if (onRefreshingListener!=null) {
					onRefreshingListener.onLoad();
//					onRefreshComplete();
				}
			}
		}
	}

	@Override
	public void onScroll(AbsListView view, int firstVisibleItem,
			int visibleItemCount, int totalItemCount) {
		
	}
	
	
	public interface OnRefreshingListener{
		/*
		 *  通知用户,需要刷新数据了
		 */
		public void onRefresh();
		public void onLoad();
		
	}
}
